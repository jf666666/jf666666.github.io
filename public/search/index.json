[{"content":" 环境配置文档 CUDA 安装包下载 CUDA安装 cuDNN 压缩包下载 cuDNN安装 Conda 安装包下载 安装与配置 安装 配置 Visual Studio Code 下载安装包 配置环境 PyTorch PowerShell配置 Python 使用conda创建一个虚拟环境 # 环境配置文档 # CUDA # 安装包下载 前往CUDA Toolkit Archive 下载在之前提到的Cuda 12.1版本，这里选择CUDA Toolkit 12.1.1进行下载，点击链接进入，选择Windows、x86_64、10、exe(local)，点击网页中的exe(local)开始下载。 # CUDA安装 下载完成后得到一个大概3g的安装包，打开进行安装，选择一个临时目录进行解压，点击ok 等待解压完成 解压完成后进入安装界面，这里也需要等待 点击同意并继续 点击自定义后点击下一步 展开CUDA选项取消勾选Visual Studio Integration，如图所示，其余不动，点击下一步 安装位置不需要修改，直接点击下一步 等待安装结束即可 # cuDNN # 压缩包下载 cuDNN和CUDA是配套的，需要下载相对应的版本，进入cuDNN官网 需要注册账号后才能进行下载 注册好账号之后点击Download cuDNN Library按钮进入下图的下载界面 同意协议后，选择for CUDA 12.x进行下一个界面 这里选择第一个Local install for Windows(Zip)进行下载 # cuDNN安装 下载完成后得到一个压缩包 解压该压缩包可以看到其中有三个文件夹 选择三个文件夹bin、include、lib并复制到CUDA的安装目录，默认目录为 1 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1 复制过程中出现弹窗，选择替换即可 4. 将CUDA添加到环境变量中\n按WIN+R，打开【运行】对话框。 输入sysdm.cpl，点【确定】按钮，点开高级选项卡，点开环境变量 选择系统变量中的Path，点击编辑，在这里需要添加CUDA的相关路径，有四个，进入先前的CUDA安装路径，点击右上侧的新建按钮，添加以下路径 1 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\bin 1 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\include 1 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\lib 1 C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.1\\libnvvp # Conda Conda本身是一个开源的包管理和环境管理系统，用于安装、运行和升级包和其依赖。Conda可以在不同的Python发行版中使用，其中Anaconda和Miniconda是最著名的两种发行版，它们都包括了conda这个工具。 环境管理器：\n创建隔离环境： Conda允许用户创建隔离的环境，每个环境都可以有不同的Python版本和/或包。这对于管理不同项目的依赖非常有用，避免了包之间的冲突。 环境复制： 可以轻松地复制和共享环境，这对于确保代码在不同计算机或用户之间可重复是非常有用的。 Conda是一个强大的工具，主要用于科学计算领域，它的作用可以从几个不同的方面来理解： # 安装包下载 本文档选择Anaconda进行安装，进入Anaconda下载，下载Windows版本的安装包即可 # 安装与配置 # 安装 打开下载好的安装包进行安装步骤 点击Next进入下一步 点击I Agree同意协议 保持默认选择Just Me，点击下一步 这里可以选择其他安装位置，最好是默认的 仍然保持默认选择，点击Install进行安装，等待安装完成 # 配置 主要是配置环境变量，步骤与配置CUDA的步骤一样\n按WIN+R，打开【运行】对话框。 输入sysdm.cpl，点【确定】按钮，点开高级选项卡，点开环境变量 选择系统变量中的Path，点击编辑，在这里需要添加Conda的相关路径，有三个，进入先前的Conda安装路径，点击右上侧的新建按钮，添加以下路径 1 D:\\ProgramData\\anaconda3 1 D:\\ProgramData\\anaconda3\\condabin 1 D:\\ProgramData\\anaconda3\\Library\\bin 注意：这里的D:\\ProgramData\\anaconda3是anaconda的安装路径，应该替换为你实际的安装地址，添加路径之后应该是这样的\n# Visual Studio Code # 下载安装包 进入vscode官网，下载Windows的Stable安装包 # 配置环境 在VScode中配置python的运行环境\n设置VScode语言为中文 点击左侧的扩展按钮，搜索Chinese插件并安装 按下快捷键Ctrl+Shift+P，输入config display language，选择中文即可 安装Python扩展，在左侧扩展栏搜索Python、Python Environment Manager进行安装 Conda设置 打开vscode设置，搜索conda，在下图中填入conda路径即可 # PyTorch Pytorch是yolo进行检测与训练需要的最基本的库，也需要根据当前最新的pytorch支持的cuda版本，选择对应版本的CUDA安装， 在网站中Pytorch Build选择Stable，Your OS选择Windows，Package选择Pip，Language选择Python，Compute Platform选择较新的版本（是因为4060ti是较新的显卡），即CUDA 12.1，最终选择如图，复制最后的Run this Command\n1 pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121 # PowerShell配置 前面的conda安装好之后，需要对PowerShell进行简单的配置\n在菜单栏中找到PowerShell，点击以管理员身份运行。 打开后执行以下命令 1 conda init 更改PowerShell的脚本执行策略为Unrestricted，通过如下命令进行设置 1 Set-ExecutionPolicy Unrestricted 运行Get-ExecutionPolicy以确认更改已生效\n# Python 配置一个独立的python环境\n# 使用conda创建一个虚拟环境 打开vscode，新建一个终端 在终端中输入以下命令创建一个环境 1 conda create -n auto_template python==3.9 激活环境 创建完成后输入conda activate auto_template激活环境，在输入之前的pytorch命令安装pytorch 1 pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121 安装完成后，创建一个测试用的python文件，输入以下代码\n1 2 import torch print(torch.cuda.is_available()) 运行后查看输出是否为True，为True则代表安装一切顺利 ","date":"2024-04-03T22:34:22+08:00","image":"https://jf666666.github.io/p/2024/04/pytorch-setup/cover_hue4cf8263671cb51764d64cca1874054f_52745_120x120_fill_box_smart1_3.png","permalink":"https://jf666666.github.io/p/2024/04/pytorch-setup/","title":"在Windows配置PyTroch，含conda、cuda等"}]