[{"content":"按轻度使用和重度使用分推荐。每种就推荐两三个，需要其他的可以参考毒药的帖子👉链接。\n极简总结：\n🔥尝鲜偶用，预算较低：一元机场，一个月不到1块钱 🔥重度依赖，流媒解锁：TAG 全球250+节点、99+流媒体解锁 # 轻度使用 预算低，舍不得在这方面大支出 备用机场防失联 海淘、谷歌 偶尔看看 Youtube 等视频 Telegram 聊天 基本没有速度和时延要求 # 一元机场🔥 官网：👉链接🚀\n协议：Trojan\n特点：廉价，流量高，速度还行，但是不太稳定。\n有点小名气的低价机场，主打的就是一个价格低。晚高峰会有点卡，稳定性也不算高，不过 12CNY/Year、20CNY/2Year 的价格要什么自行车，主要是速度也还行，解锁 Netflix 和 Disney+，美国节点解锁 ChatGPT。\n他家就买这个传家宝套餐就行了，当然其他套餐也可以，不过个人觉得意义不大。\n节点以香港、日本、美国、新加坡为主，偶尔会出现土耳其等特别的节点。\n# 三分机场 官网：👉链接🚀\n协议：VMESS\n特点：廉价，流量较少，速度还行，稳定性一般，相对小众一点。\n和上面类似，也是靠低价起家的，后来也推出了高级套餐，不过买贵的干嘛买他家。9.5CNY/Year 的价格，VIP1-200G 每月-年付套餐，大概每天 3 分钱，机场名字应该也是这么来的，买个随便玩玩还是可以的。\n特别注意，套餐里有个小字说明，福建福州、泉州、河南大部分地区此套餐可能无法使，这些地区的小伙伴谨慎购买。\n目前节点包括香港、日本、美国、新加坡、台湾。\n官方频道测速如下：\n额外提一下中转套餐，节点较少，由于近期刚推出，猜测应该会不错，价格实惠，14.50CNY/月付，流量300G/月，可以试试。没找到测速图，贴一张节点图给大家参考。\n# 重度使用 不在乎价格 Netflix、Disney+ 等流媒体重度依赖 长期看不能直连的 Emby 公益服 Telegram 上看视频 办公强依赖 追求稳定性 高速和低时延要求 # TAG 全球250+节点、99+流媒体解锁🔥 官网：👉链接🚀\n协议：Shadowsocks\n特点：比较贵，节点覆盖面广，速度较快，稳定。\n以前的 Ac­cel­er­a­tor，线路现在是全 BGP-IEPL 广港 + BGP-IEPL 沪日中转，全球90+国家地区节点，地区覆盖范围目前应该是最广的。\n同样的，Netflix、Disney+ 等流媒体，该解锁的都解锁了，ChatGPT 也是。\n他家有一个特别套餐，154CNY/Year，总共200G流量，用作备用防失联特别好，或者需要一些罕见地区的时候。\n其他套餐价格如下：\n毒药的电信测速，可以参考下。\n# Nexitally 官网1：👉链接🚀\n官网2：👉链接🚀\n协议：Shadowsocks, Trojan\n特点：昂贵，稳定，流量还行，速度快，晚高峰也稳定有速度。PS: 最近稍微有点不稳定，不知道机场在折腾啥，建议稍微观望下。\n官网打不开的话先挂个别的代理。\n毒药推荐中的第一名，佩奇家中转线路的高端机场，成立大概三年多。稳定性和速度都不错，价格高，但是对于追求稳定性的用户也还好。\n这也是我个人主要使用的，已经使用三年了，目前应该是第四年。\nNetflix、Disney+ 等流媒体，该解锁的都解锁了，ChatGPT 也是可以正常用的。\n有自己的傻瓜客户端，可以登录后一键连接。\n套餐情况：\nSmart Access：每月 500G 流量，约 117CNY/Month，约 606CNY/Year，约 1102CNY/Year Smart Access Air：每月 200G 流量，价格是 Smart Access 的一半多点，但是限量提供，能不能买到看缘分，买到后可以一直续费 毒药的电信测速，可以参考下。\n# TLS 官网：👉链接🚀\n协议：Shadowsocks\n特点：中高级套餐附带Emby，价格适中，速度较快，相对稳定。PS: Emby 服务高清资源已经恢复了，4K还没有，感觉半摆烂了······\n最大的特色是高级套餐附带 Emby 服务，并且直连 Emby 的速度也是不错的，不需要梯子就能直接看。影视库更新速度也挺快，最新电视剧集基本第二天就上了。\n套餐除了机场送 Emby 外，也单独提供了 Emby 套餐。\n相对小众一点，客服态度也很好，价格与 Nexitally 和 TAG 相比要低一点。\n测速如下：\n# 最后 对于刚接触科学上网的朋友，建议先买廉价的梯子试试，确认自己是否有科学上网的需求、科学上网的依赖度有多大，然后再考虑换高价稳定的梯子。\n对于海淘只看看商品不亲自购买的朋友，一元机场、三分机场这种完全够用，别信海淘群里那种倒卖的，说不定卖给你的也是这种。\n","date":"2024-02-28T09:24:13+08:00","image":"http://localhost:1313/p/2024/02/airport-recommend/cover_hu0b647b632483cbc2493cff89a71f6b1e_99619_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/2024/02/airport-recommend/","title":"机场/梯子推荐"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n👉 首先推广下自己编译的 OpenWrt 旁路由极简版，专为旁路由而制作。 👍👍👍\n编译脚本以及个人修改的组件依赖全开源，Github Actions 在线编译，安全可靠无后门。 基于 lede 源码 默认配置 DHCPv6 Client 接口 lan6。 默认配置好了 AdGuardHome 、 mosdns 和 openclash （或 ssrp ）的搭配运行配置。 openclash 预置 clash_meta 内核。 mosdns 使用了 自己的修改版，支持 MMDB GeoIP 匹配。 版本 说明 下载地址 x86 包含 ssrp 和 openclash，详细说明 下载 x86 openclash 专版 仅包含 openclash，详细说明 下载 r2s 包含 ssrp 和 openclash，详细说明 下载 n1 包含 ssrp 和 openclash，详细说明 下载 # 前言 CN网络的阻断方式主要有两个部分：\nGFW 阻断 DNS 污染 GFW 阻断就是我们常说的被墙了，即使是DNS没有被污染，也无法访问到。\nDNS 污染即让你访问网站时，无法获得域名对应的IP地址，从而导致无法访问到网站。DNS 污染在移动宽带中尤为典型，即使自定义了DNS 服务器，也会被拦截污染。\n要实现科学上网，必须同时解决GFW 阻断和DNS 污染，并且两者配合以提高网络访问体验。\n代理中的DNS知识，可以参考 Sukka 的这篇文章《浅谈在代理环境中的 DNS 解析行为》\n# 路由器科学上网和终端科学上网的区别 路由器上配置透明代理，和在终端PC上直接通过客户端，最主要的区别是 DNS 解析。\n# PC终端上 通常有以下几个步骤\n启动客户端 选择全局/规则模式 配置系统代理（一般客户端自动配置），把科学上网客户端作为系统代理的上游代理服务器 第3步里的配置系统代理，通常有http和sock5两种。\n此时，打开浏览器访问一个网站：\n当使用http代理时，浏览器不会在本地进行 DNS 解析，请求的域名会作为 http 报文的一部分直接发给代理服务器（科学上网客户端），DNS 完全在代理服务器（科学上网客户端）上处理。\n当使用sock5代理时，sock5支持UDP，DNS 解析会封装在sock5之中，发给代理服务器（科学上网客户端）处理，浏览器拿到 IP 地址后，在发起连接。\n# 路由器上配置透明代理 此时，科学上网客户端运行在路由器上，PC 终端是看不见代理的，所以叫透明代理。PC 终端上，请求的发起的流程照旧，先进行 DNS 解析，拿到 IP 后再发起请求。\n在这种情况下，对于路由器上运行的科学上网客户端来说，域名和 IP 是两个请求，有的会内置 Mapping 机制（例如 Clash），用来还原 IP 到域名。\n这种情况下，优惠DNS配置就相对比较重要了，否则针对部署的CDN的网站不能做到最优访问。\n# 正文开始：配置 \u0026amp; DNS 优化 本文主要考虑的是自由的局域网环境，所以只介绍路由器上科学上网配置。\n首先分析下要实现的目标：\n双栈网络 国内网络使用 IPV4 \u0026amp; IPV6 双栈 科学上网仅使用 IPV4 国内外分流 DNS分流 国内域名由国内 DNS 服务器解析 国外域名经过代理由国外 DNS 服务器 # 国内外和应用分流 这个没啥好多说的，按文档配置规则就行。也可参考文末给出的示例配置。\n# DNS 优化目标 广告过滤：使用 AdGuardHome DNS分流：使用 mosdns 其中，境外网站屏蔽 IPV6 应答 如果使用 openclash，DNS 必须经过 clash 内核，以使 DNS 完成 IP \u0026lt;\u0026ndash;\u0026gt; Domain 的 mapping PS: mosdns 使用 alecthw 修改版，支持 MMDB GeoIP 匹配\n# 多级 DNS 级联 flowchart LR A[AdGuardHome, Port 53, no cache] -- 主要 --\u0026gt; B[openclash, Port 5335] B --\u0026gt; C[mosdns, Port 7874] A -- 备用\\n防止 openclash 为运行时网络无法访问 --\u0026gt; C 配置过程如下：\n修改了 dnsmasq 的默认端口号，用 AdGuardHome 监听53端口作为默认的DNS解析。 AdGuardHome 可以监控的各个终端的 DNS 请求，并使用广告过滤和管控功能。 openclash 作为 AdGuardHome 的上游。 mosdns 作为 AdGuardHome 的上游备用服务器。 openclash 中本地 DNS 劫持设置为停用，当 openclash 运行时，openclash 作为 AdGuardHome 的上游主要服务器生效。 openclash 复写设置中，启用自定义上游 DNS 服务器，并指定 mosdns 为唯一上游。 如此一来，最终的 DNS 请求由 mosdns 发出，请求会经过 openclash 分流，按请求的 DNS 服务器直连或走代理。DNS 请求整个流程如下：\nflowchart TB A((电脑/手机\\n浏览器)) -- DNS 请求 --\u0026gt; B[路由器\\nAdGuardHome] B --\u0026gt; C[路由器\\nopenclash DNS] C --\u0026gt; D[路由器\\nmosdns] D --\u0026gt; E[路由器\\nopenclash Proxy Client] E -- 国外 DNS 服务器\\n屏蔽ipv6应答 --\u0026gt; F[服务器\\nProxy Server] E -- 国内 DNS 服务器 --\u0026gt; N(Internet) F --\u0026gt; N 如此，便实现了\nAdGuardHome 的管控和广告过滤 mosdns 分流 DNS，并屏蔽非中国大陆 IP 的 IPV6 应答 DNS 经过 clash 内核，迎合其 mapping 机制 # 配置示例 再次提醒，文章开始处的固件，所有配置已内置哦！\n# dnsmasq # AdGuardHome # openclash 注意删除默认的DNS配置，仅保留这一个即可。\n# mosdns 使用自定义配置，由于使用了 mmdb geoip 匹配，mosdns 必须使用 alecthw 修改版。\nPS: 以下配置中的cn-white.txt，来自项目chnlist，我编译的固件已内置并设置自动更新，其他固件需要手动下载。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 # 白名单模式 # 白名单 或 境外查询IP是geoip:CN，走国内 log: level: info file: \u0026#34;/tmp/mosdns.log\u0026#34; plugins: # mmdb - tag: country type: mmdb args: file: \u0026#34;/etc/mosdns/rule/Country.mmdb\u0026#34; # cn ip - tag: whitelist type: domain_set args: files: - \u0026#34;/etc/mosdns/rule/cn-white.txt\u0026#34; # 广告域名列表 geosite:category-ads-all - tag: geosite_ads type: domain_set args: files: - \u0026#34;/etc/mosdns/rule/reject-list.txt\u0026#34; # hosts - tag: hosts type: hosts args: entries: - \u0026#34;localhost 127.0.0.1\u0026#34; # 缓存 - tag: cache type: cache args: size: 20480 lazy_cache_ttl: 86400 dump_file: \u0026#34;/etc/mosdns/cache.dump\u0026#34; dump_interval: 1800 # 查询境外DNS - tag: forward_global type: forward args: concurrent: 3 upstreams: - tag: Google_dot addr: \u0026#34;tls://8.8.4.4\u0026#34; enable_pipeline: true - tag: Quad9_dot addr: \u0026#34;tls://9.9.9.9\u0026#34; enable_pipeline: true - tag: Cloudflare_dot addr: \u0026#34;tls://1.0.0.1\u0026#34; enable_pipeline: true - tag: OpenDNS_dot addr: \u0026#34;tls://208.67.222.222\u0026#34; enable_pipeline: true # 查询国内DNS - tag: forward_china type: forward args: concurrent: 2 upstreams: - tag: Ali_dot addr: \u0026#34;tls://223.5.5.5\u0026#34; enable_pipeline: true - tag: DNSPod_dot addr: \u0026#34;tls://120.53.53.53\u0026#34; enable_pipeline: true # 境外解析，优先IPV4 - tag: global_sequence type: sequence args: - matches: qname $whitelist exec: return - exec: prefer_ipv4 - exec: $forward_global - matches: resp_ip_mmdb $country CN exec: drop_resp # 国内解析，不设置过滤，作为fallback - tag: china_sequence type: sequence args: - exec: $forward_china # 屏蔽解析 - tag: reject_sequence type: sequence args: - matches: qname $geosite_ads exec: reject 3 - matches: qtype 12 exec: reject 3 # - matches: qtype 65 # exec: reject 3 # 如果 primary 抛出错误，或返回但没有应答，或在 threshold 毫秒内无响应，则执行 secondary。 # 所以在 primary 中不能用 rejcet，reject 也是应答 # Fallback - tag: fallback type: fallback args: primary: global_sequence secondary: china_sequence threshold: 150 always_standby: true - tag: main_sequence type: sequence args: - exec: $reject_sequence - exec: $hosts - matches: has_resp exec: accept - exec: $cache - matches: has_resp exec: accept - exec: $fallback - matches: has_resp exec: ttl 10-600 - tag: udp_server type: udp_server args: entry: main_sequence listen: 0.0.0.0:5335 ","date":"2023-11-25T20:32:18+08:00","image":"http://localhost:1313/p/2023/11/fuck-gfw/cover_hu09960b07a1e185b48779a3adb570c92f_73138_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/2023/11/fuck-gfw/","title":"AdGuardHome + mosdns + openclash 打造自由的家庭/办公室网络"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n# ROS 的 UPNP 由于 ROS 的 UPNP 功能没有自带类似黑白名单类似的功能，那只能从防火墙入手了。\nUPNP 服务端涉及两个端口，1900(UDP) 和 2828(TCP)。那么，目标就很明确了：\n建个白名单 仅允许白名单内的 IP 访问这两个端口 # 配置过程 # 创建一个名称为 allow_upnp 的地址列表作白名单 1 2 3 /ip firewall address-list add address=192.168.1.1 list=allow_upnp add address=192.168.1.2 list=allow_upnp # 创建两条 filter 规则 1 2 3 /ip firewall filter add action=drop chain=input dst-port=1900 protocol=udp src-address-list=!allow_upnp add action=drop chain=input dst-port=2828 protocol=tcp src-address-list=!allow_upnp 如果原来规则较多，注意下放的位置。\n# 重启下 UPNP 服务 1 2 3 /ip upnp set enabled=no set enabled=yes 这样就配置好了，等个几个小时看看，NAT 列表里，除了允许的几个 IP 有 UPNP，其他应该都没有。世界清净了。\n如果有问题，优先检查 filter 规则顺序。\n# 附：DHCP 静态自动添加到地址列表 1 2 /ip dhcp-server lease add address=192.168.1.x mac-address=xx:xx:xx:xx:xx:xx address-lists=allow_upnp ","date":"2024-02-26T20:11:45+08:00","image":"http://localhost:1313/p/2024/02/routeros-upnp-blcok/cover_huca83aa35fe84efa02b4aaf088221896b_32320_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/2024/02/routeros-upnp-blcok/","title":"RouterOS 给 UPNP 设置白名单，避免 APP 白嫖上行带宽"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n👉 注册 CloudDrive2 的时候可以填上我的推荐码哦：cAR6b415。\n核心点：\n使用 CloudDrive2 把云盘挂载到本地。 新款 CPU 如果没有硬解选项，就安装 beta 版的 emby。 PS：以下使用的ESXi 8.0，基于 Ubuntu 22.04 LTS，在 root 用户下操作。需要有简单的 Linux 基础知识，例如了解 SSH、VIM 怎么使用。\nPS：CloudDrive2 和 Emby 的都是从 Github 下载的，连不上 Github 自行科学上网。\n# ESXi 核显直通 务必先创建好虚拟机，并配置好静态 IP 地址和 SSH！！！\n直通并添加核显到虚拟机之后，ESXi网页中，虚拟机的控制台将什么也不显示了。如果没有配置 IP 和 SSH，只能要么把虚拟机核显删掉，要么机器直接连显示器。\n# 1. 打开 ESXi SSH 如图所示操作。开启完使用工具登录，例如 Putty、XShell 等。\n# 2. 禁用 ESXi 显卡调用 禁用后，机器连接显示器将不显示黄黑色控制台。\n1 2 3 4 5 # 禁用 esxcli system settings kernel set -s vga -v FALSE # 查看配置结果 esxcli system settings kernel list -o \u0026#34;vga\u0026#34; 查出的结果如下，Configured 显示 FALSE 即成功，等一会儿重启后 Runtime 会变成 FALSE。\n1 2 3 Name Type Configured Runtime Default Description ---- ---- ---------- ------- ------- ----------- vga Bool FALSE TRUE TRUE Enable/Disable VGA support. # 3. passthru.map 增加核显 查看核显设备ID\n1 2 # 禁用 lspci -v | grep -A 2 VGA 返回的信息如下，关注下第二行。\n1 2 0000:00:02.0 Display controller VGA compatible controller: Intel Corporation Alder Lake-S GT1 [UHD Graphics 770] Class 0300: 8086:5916 8086 是供应商 ID，这里就是 Intel，5916 就是硬件 ID。记下这8个字符，这里不要照抄哦，要用你自己的。\n用 vi 修改 passthru.map，在最后添加\n1 2 # Intel VGA 8086 5916 d3d0 default 保存，重启ESXi主机。\n# 4. 切换显卡直通 ESXi Web 控制台下\n切换成功后，直通显示为 活动。ESXi 7.x 和 ESXi 8.x 是不需要重启主机的，ESXi 6.7 可能还需要重启一次。\n# 5. 虚拟机添加核显 创建虚拟机的步骤不再赘述。\n编辑虚拟机\n禁用 CPU 下虚拟化相关的三个配置\n内存下，勾选 预留所有客户机内存\n添加 PCI 设备\n在 PCI设备1中，选择你的核显。\n保存，启动虚拟机。这一次启动可能会比较慢，耐心等待，直到 SSH 可以连接上虚拟机。\n# 安装配置 CloudDrive2 后续虚拟机上，都是在 root 用户下操作的。\n# 1. 虚拟机前置配置 1 2 3 4 5 6 7 8 9 10 # 切换到 root 用户 sudo su # 安装 vim apt update apt install -y vim # 禁用防火墙 systemctl stop ufw systemctl disable ufw # 2. 安装 CloudDrive2 官网下载 Linux 版本，使用 SFTP 客户端，上传到虚拟机的 /opt 目录下。\n1 2 3 4 5 6 7 8 9 10 11 # 进入 /opt 目录 cd /opt # 创建一个新目录，给后续挂载云盘用 mkdir /opt/mnt # 解压 tar xzf clouddrive-2-linux-x86_64-*.tgz # 更名 mv clouddrive-2-linux-x86_64-* clouddrive2 # 3. 创建 systemd service 1 vim /lib/systemd/system/clouddrive2.service 填入以下内容\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [Unit] Description=clouddrive2 ConditionFileIsExecutable=/opt/clouddrive2/clouddrive After=network.target Wants=network.target [Service] Type=simple PIDFile=/var/run/clouddrive2.pid ExecStart=/opt/clouddrive2/clouddrive WorkingDirectory=/opt/clouddrive2 Restart=on-failure [Install] WantedBy=multi-user.target # 4. 启动 CloudDrive2 1 2 systemctl enable clouddrive2 systemctl start clouddrive2 # 5. 网页登陆配置 http://ip:19798/\n注册登录后界面如下\n点击云图标添加网盘，登录授权。\nCloudDrive2 免费版功能有限制，一般情况下个人用户足够使用。具体可参考下图：\n# 6. 挂载网盘到本地 左树选择一个网盘（也可以选择子目录），然后点击 电脑图标，开始挂载，界面如下\n如果默认的名称为中文，建议改成 英文/数字，这个名称就是挂载后，Linux 本地的文件夹名称。\n点击 选择，选择挂载点，这里选择之前创建的 /opt/mnt 目录\n挂载成功后，命令行看一下虚拟机的目录，这里我挂载了 aliyun 和 115。\n1 2 root@ubuntu-emby:~# ls /opt/mnt/ 115 aliyun # 安装配置 Emby-Server 注意：较新的CPU，建议下载 Beta 版本，否则硬解无法选择 QuickSync。或者先安装标准版，发现硬解无法选择 QuickSync，再覆盖安装 Beta 版。\n# 1. 安装 Emby 官网下载 ubuntu 版本的 deb 包。\n安装\n1 dpkg -i emby-server-deb_*_amd64.deb 安装后已经自动启用了，可以再执行一遍以下命令，防止开机自启没开启。\n1 systemctl enable emby-server 查看运行状态\n1 systemctl status emby-server # 2. 启动顺序 由于使用了 CloudDrive2 挂载云盘，期望的是 CloudDrive2 要在 Emby 之前启动，才能保证 Emby 正常读取到网盘内容，避免报错。\n编辑 emby 的 service 文件\n1 vim /lib/systemd/system/emby-server.service 在 After=network.target 后面，均添加 clouddrive2.service，然后再添加一行 Wants=network.target clouddrive2.service，如下\n1 2 3 4 5 [Unit] Description=Emby Server is a personal media server with apps on just about every device After=network.target clouddrive2.service Wants=network.target clouddrive2.service ····· 重载并重启\n1 2 systemctl daemon-reload systemctl restart emby-server 注意，升级安装 emby 后，这个 service 会被覆盖成默认的，需要再次修改。\n# 3. 配置 Emby http://ip:8096/\n登录后按照指引配置就行了，这里网上教程很多，不赘述。\n创建媒体库的时候，文件夹选择通过 CloudDrive2 挂载到本地的文件夹即可。例如：\n# 4. Emby 硬解 如下图，勾选 QuickSync，调整顺序即可。\n然后，随便找个视频测试下转码，调整码率，拖拉快进等。\n# 5. 电视直播 m3u 目前好用的直播源都是 ipv6 的，如果正确配置了 ipv6，可以添加如下直播源和指南数据库。\n直播源：https://live.fanmingming.com/tv/m3u/ipv6.m3u XmlTV：https://live.fanmingming.com/e.xml ","date":"2024-01-23T10:31:42+08:00","image":"http://localhost:1313/p/2024/01/emby-clouddrive2/cover_hu891594d144c5c83cc6811113b0fc29af_79812_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/2024/01/emby-clouddrive2/","title":"ESXi 直通核显开启硬解，Emby 配合 CloudDrive2 挂载云盘打造家用的流媒体"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n关于云固件相关的资料，请参考 陆伟峰​的知乎，这里不再赘述。\n过程是其实和硬件硬盘是一样的，这里只不过是用同样的方式创建虚拟磁盘，然后在 Hyper-V 中启动。\n# 云固件文件准备 云固件：r23942（v1.6.23942） Win11 L1 镜像：Windows 11 专业版 L1基本安装镜像 # 软件准备 DiskGenius # 开始制作 整体还是比较简单的，先创建 vdhx 虚拟磁盘，然后用 DiskGenius 分区，最后然后再把 Win11 L1 镜像拷贝到 创建的 vhdx 中，配置启动镜像即可。\n# 创建 vdhx 为了简单，这里给出使用磁盘管理图形界面的创建步骤。\n首先打开计算机管理，然后点击左边的磁盘管理。\n右键，点击创建VHD。\n按下图输入大写和选择，注意大小要大于 260G，具体原因参考陆大的文章。\n创建之后会自动挂载。\n# 分区 1 2 3 注意：操作千万小心，不要错选磁盘，认证核对，避免数据丢失，数据无价！！！ 注意：操作千万小心，不要错选磁盘，认证核对，避免数据丢失，数据无价！！！ 注意：操作千万小心，不要错选磁盘，认证核对，避免数据丢失，数据无价！！！ 打开 DiskGenius，选中刚刚创建的虚拟磁盘，然后点击快速分区。\n按下图选择，卷标输入 VDs，点击确定。\n执行成功和，VDs 应该被自动分配盘符挂载到系统了。\n还需要把 ESP 分区也挂载到系统，只能在 DiskGenius 中操作。\n# 复制文件 将云固件解压到 ESP 分区，如下图：\n将云固件中的 vd.config 拷贝到 VDs 分区中。\n再将下载的 Windows 11 专业版 L1基本安装镜像，目录 b1882792 中的 Windows11-22H2-Pro-L1.7z 文件解压，解压后删除原文件 Windows11-22H2-Pro-L1.7z。\n然后将目录 b1882792 拷贝到 VDs 分区中。目录结构如下。\n# 分离VHD （可选）在 DiskGenius 中删除 ESP 分区的盘符。\n在磁盘管理中，右键虚拟磁盘，点击分离VHD。\n至此，Hypver-V 上的云固件虚拟盘就做好了。\n# 在 Hyper-V 中创建虚拟机 按如下步骤创建，选择第二代，虚拟磁盘选择使用现有。\n创建完成后，在虚拟机设置中，禁用安全启动。\n# 启动运行 双击虚拟机，启动运行。\n此时，鼠标可能无法使用，请使用 Tab键、方向键和回车键操作。\n顺利进入系统。\n# 使用 WinNTSetup 快速制作 Windows L0 镜像 下载 WinNTSetup。\n# vhdx 准备 参考之前步骤，完成虚拟磁盘的创建和分区。\n创建 vdhx，大小建议70G以上。 分区，卷标不用指定。 # 制作过程中自动禁用虚拟磁盘扩充到最大 在目录 WinNTSetup\\RegTweaks\\Win10 下创建 disable-vdisk-expand.reg。\n这个目录是安装过程中修改注册表的，可以利用此特性预置很多配置。\n1 2 3 4 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\FsDepends\\Parameters] \u0026#34;VirtualDiskExpandOnMount\u0026#34;=dword:00000004 # 使用 WinNTSetup 创建 L0 镜像 打开 WinNTSetup。\n选择 Windows 安装镜像 ISO，这里以 LSTC 为例。 引导驱动器选择虚拟磁盘的ESP分区，就是 FAT32 300MB 那个。 系统驱动器选择虚拟磁盘最大的那个分区，NTFS 那个。 优化调整里，注册表调整选择Win10，其余选项按需调整。 最后点击 安装，会提示不能选择VHD作为引导驱动器，点击确定继续即可。\n安装结束会提示重启，就不用重启了。\n最后分离 VHD，一个 Windows 的 L0 镜像就做好了。\n","date":"2024-01-14T17:57:22+08:00","image":"http://localhost:1313/p/2024/01/cloud-firmware-hyperv/cover_huaa4a84f5cf7d21ee1a9e36e7973b6fa4_770531_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/2024/01/cloud-firmware-hyperv/","title":"在 Hyper-V 中体验 陆大大的云固件 \u0026 使用 WinNTSetup 制作 L0 镜像"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n👉 需要的朋友自取。\n使用 Github Actions 构建，过程全透明，不存在后门的可能。官方镜像，非破解。\nRouterOS chr-7.x 已经包含了 efi 启动文件，但是分区类型是 ext2。\n所以，只要把分区类型从 ext2 转成 fat 就可以从 uefi 引导启动了。\n当然，喜欢 GPT 的话，也可以制作 Hybrid MBR。\n# 镜像下载 👉 Release 👈\n👉 破解版传送门 👈\n包含的镜像类型：\nimg qcow2 vdi vhd vhdx vmdk # Hybrid MBR 记录 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ( echo 2 # use GPT echo t # change partition code echo 1 # select first partition echo 8300 # change code to Linux filesystem 8300 echo r # Recovery/transformation echo h # Hybrid MBR echo 1 2 # partitions added to the hybrid MBR echo n # Place EFI GPT (0xEE) partition first in MBR (good for GRUB)? (Y/N) echo # Enter an MBR hex code (default 83) echo y # Set the bootable flag? (Y/N) echo # Enter an MBR hex code (default 83) echo n # Set the bootable flag? (Y/N) echo n # Unused partition space(s) found. Use one to protect more partitions? (Y/N) echo w # write changes to disk echo y # confirm ) | sudo -E gdisk /dev/nbd1 ","date":"2023-12-07T17:11:11+08:00","image":"http://localhost:1313/p/2023/12/routeros-uefi/cover_hud8282d25cdf4a87aa5f8fc54a7be57e4_89180_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/2023/12/routeros-uefi/","title":"RouterOS CHR v7 UEFI 镜像，使用 Github Actions 构建"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\nVXLAN（Virtual eXtensible Local Area Network，虚拟扩展局域网），是由 IETF 定义的 NVO3（Network Virtualization over Layer 3）标准技术之一，是对传统 VLAN 协议的一种扩展。VXLAN 的特点是将 L2 的以太帧封装到 UDP 报文（即 L2 over L4）中，并在 L3 网络中传输。\nVXLAN 本质上是一种隧道技术，在源网络设备与目的网络设备之间的 IP 网络上，建立一条逻辑隧道，将用户侧报文经过特定的封装后通过这条隧道转发。\n关于 VXLAN，这里不展开讲，只需要知道两点：\n它是一种隧道技术 它在公有云中被广泛应用 更深入的了解，可以参考什么是 VXLAN。\n既然是隧道，就可以用它来整活儿。由于被公有云广泛应用，猜测 GFW 对它的审查应该有所放松。记得曾经在某公司云服务的一场会议上，听其高管讲，共有云的跨国流量里，80% 的流量都是非法业务。\n既如此，如果用 VXLAN 来科学上网，效果会不会不错？\n1 2 3 先说结论吧： - 直接把 VXLAN 作为隧道翻墙是不可行的，经测试，由于 VXLAN 并不加密，GFW 的审查应该是会剥离 VXLAN 头部直接审查内部报文。 - 所以，即使经过了 VXLAN 隧道，把 VPS 作为网关，访问情况和国内直接访问一致。 # 网络规划 整体思路就是旁路由的思路，直接上图：\n划重点：\nVXLAN 是要双向配置的，所以本地和远端都必须是公网IP。 本地使用 RouterOS 7，当时起个 Liunx 也可以，用 ROS 主要是为了方便配置策略路由来分流。 # 开始配置 以下涉及到公网的 IP 的，使用 x 替换了一部分，复制命令时请自行替换。\n这里是新拉起了一个 Linode VPS 作为远端服务器，系统使用的是 Ubuntu 22.04。\n# VPS 准备工作 # 1. 禁用防火墙 既然是实验，先禁用防火墙，避免其可能的影响。\n1 2 systemctl stop ufw.service systemctl disable ufw.service # 2. 开启转发 1 vim /etc/sysctl.conf 取消以下两行的注释\n1 2 net.ipv4.ip_forward=1 net.ipv6.conf.all.forwarding=1 再执行\n1 sysctl -p # RouterOS 准备工作 RouterOS 的配置就不截 winbox 配置界面的图了，命令行和界面基本都能对上，直接贴命令行了。\n# 1. IP服务的安全策略先加上，避免被爆破，导致控制台疯狂输出登录失败日志 1 2 3 4 5 6 7 8 /ip service set telnet address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set ftp address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set www address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set ssh address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set www-ssl address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set api address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set winbox address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 /ip service set api-ssl address=10.0.0.0/8,172.16.0.0/12,192.168.0.0/16 # 2. 配置上网，这里是 PPPOE 拨号 修改下接口名字\n1 2 /interface ethernet set [ find default-name=ether1 ] name=ether1-wan /interface ethernet set [ find default-name=ether2 ] name=ether2-lan 配置 PPPOE\n1 /interface pppoe-client add interface=ether2-wan name=pppoe-wan user=\u0026lt;user\u0026gt; password=\u0026lt;password\u0026gt; 配置 DNS\n1 /ip dns set allow-remote-requests=yes servers=223.5.5.5,114.114.114.114 # 配置检查 # 本地 ROS ping VPS 1 2 3 4 5 6 [root@rostest] \u0026gt; ping 172.233.142.x SEQ HOST SIZE TTL TIME STATUS 0 172.233.142.x 56 47 184ms440us 1 172.233.142.x 56 47 184ms340us 2 172.233.142.x 56 47 184ms235us sent=3 received=3 packet-loss=0% min-rtt=184ms235us avg-rtt=184ms338us max-rtt=184ms440u 可以看到网络是通的。\n# VPS ping 本地 ROS 的公网 IP 1 2 3 4 5 6 7 8 9 root@localhost:~# ping 121.229.x.x PING 121.229.x.x (121.229.x.x) 56(84) bytes of data. 64 bytes from 121.229.x.x: icmp_seq=1 ttl=40 time=186 ms 64 bytes from 121.229.x.x: icmp_seq=2 ttl=40 time=186 ms 64 bytes from 121.229.x.x: icmp_seq=3 ttl=40 time=186 ms --- 121.229.x.x ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2002ms rtt min/avg/max/mdev = 185.582/185.879/186.073/0.213 ms 可以看到网络是通的。\n# VXLAN: VPS 配置 以下分别为命令行和 netplan 的配置。\n# 命令行 1 2 3 4 5 6 7 8 ip link add vxlan0 type vxlan \\ id 3000 \\ remote 121.229.x.x \\ dstport 4789 \\ local 172.233.142.x \\ dev eth0 ip link set vxlan0 up ip addr add 192.168.99.2/24 dev vxlan0 查看 vxlan0 接口\n1 2 3 4 5 6 7 8 9 root@localhost:~# ifconfig vxlan0: flags=4163\u0026lt;UP,BROADCAST,RUNNING,MULTICAST\u0026gt; mtu 1450 inet 192.168.99.2 netmask 255.255.255.0 broadcast 0.0.0.0 inet6 fe80::ec90:6ff:fe88:372d prefixlen 64 scopeid 0x20\u0026lt;link\u0026gt; ether ee:90:06:88:37:2d txqueuelen 1000 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 8 bytes 544 (544.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 查看路由表，多了下面的内容，所有目的地址是 192.168.99.0/24 网络包要通过 vxlan0 转发：\n1 2 root@localhost:~# ip route show 192.168.99.0/24 dev vxlan0 proto kernel scope link src 192.168.99.2 查看 fdb。这个表项的意思是，默认的 VTEP 对端地址为 121.229.x.x。换句话说，原始报文经过 vxlan0 后会被内核添加上 VXLAN 头部，而外部 UDP 头的目的 IP 地址会被冠上 121.229.x.x。\n1 2 root@localhost:~# bridge fdb show 00:00:00:00:00:00 dev vxlan0 dst 121.229.x.x via eth0 self permanent # netplan 配置文件 命令行配置重启后会失效，放到 netplan 里配置持久化。\n/etc/netplan/99-vxlan-config.yaml\n1 2 3 4 5 6 7 8 9 10 11 network: version: 2 tunnels: vxlan0: mode: vxlan local: 172.233.142.x remote: 121.229.x.x id: 3000 port: 4789 addresses: - 192.168.99.2/24 # VXLAN: 本地 ROS 配置 先创建 VXLAN，然后再把 VXLAN 接口和 LAN 口桥接。\n# 创建 VXLAN 1 2 /interface vxlan add name=vxlan0 port=4789 vni=3000 /interface vxlan vteps add interface=vxlan0 remote-ip=172.233.142.x # 桥接 vxlan0 和 ether2-lan 1 2 3 /interface bridge add name=br-lan /interface bridge port add bridge=br-lan interface=ether2-lan /interface bridge port add bridge=br-lan interface=vxlan0 # br-lan 配置 IP 1 /ip address add address=192.168.99.1/24 interface=br-lan network=192.168.99.0 这里配置的 IP 和 VPS 上给 vxlan0 接口配置的 IP 是相同网段的。\n# 测试 VXLAN 隧道 在 VPS 上 ping ROS 的 br-lan 接口的 IP\n1 2 3 4 5 6 7 8 9 root@localhost:~# ping 192.168.99.1 PING 192.168.99.1 (192.168.99.1) 56(84) bytes of data. 64 bytes from 192.168.99.1: icmp_seq=1 ttl=64 time=144 ms 64 bytes from 192.168.99.1: icmp_seq=2 ttl=64 time=144 ms 64 bytes from 192.168.99.1: icmp_seq=3 ttl=64 time=144 ms --- 192.168.99.1 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2003ms rtt min/avg/max/mdev = 144.359/144.400/144.446/0.035 ms 在 ROS 上 ping VPS 的 vxlan0 接口的 IP\n1 2 3 4 5 6 [root@rostest] \u0026gt; ping 192.168.99.2 SEQ HOST SIZE TTL TIME STATUS 0 192.168.99.2 56 64 144ms271us 1 192.168.99.2 56 64 144ms647us 2 192.168.99.2 56 64 144ms309us sent=3 received=3 packet-loss=0% min-rtt=144ms271us g-rtt=144ms409us max-rtt=144ms647us 可以看到，VXLAN 已经互通了。\n在 VPS 上再查看一下 fdb，可以看到，本地网络的一些 MAC 地址已经学习过来了，摘取了部分：\n1 2 3 4 00:00:00:00:00:00 dev vxlan0 dst 121.229.x.x self permanent ac:82:26:xx:xx:xx dev vxlan0 dst 121.229.x.x self 26:99:ac:xx:xx:xx dev vxlan0 dst 121.229.x.x self 98:3f:60:xx:xx:xx dev vxlan0 dst 121.229.x.x self # 在 VPS 上配置 snat 源地址 NAT 不多说了，不明白的自己查。\n1 2 3 4 5 6 iptables -t nat \\ -A POSTROUTING \\ -s 192.168.99.0/24 \\ -o eth0 \\ -j SNAT \\ --to-source 172.233.142.x 配置完查看下，确保配置成功\n1 2 3 4 root@localhost:~# iptables -nL -t nat Chain POSTROUTING (policy ACCEPT) target prot opt source destination SNAT all -- 192.168.99.0/24 0.0.0.0/0 to:172.233.142.x # PC 上网测试 把本地电脑的网络配置成：\n地址: 192.168.99.200 掩码: 255.255.255.0 网关: 192.168.99.2 DNS: 8.8.8.8 在 VPS 上 ping 一下 192.168.99.200\n1 2 3 4 5 6 7 8 9 root@localhost:~# ping 192.168.99.200 PING 192.168.99.200 (192.168.99.200) 56(84) bytes of data. 64 bytes from 192.168.99.200: icmp_seq=1 ttl=128 time=145 ms 64 bytes from 192.168.99.200: icmp_seq=2 ttl=128 time=144 ms 64 bytes from 192.168.99.200: icmp_seq=3 ttl=128 time=143 ms --- 192.168.99.200 ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 1998ms rtt min/avg/max/mdev = 143.159/144.091/144.858/0.703 ms 可以看到，VPS 和本地 PC 已经连通，并且还是相同网段的二层域。\n打开浏览器，打开 https://ip.skk.moe/ 测试下。\n从图中可知，IP 地址已经是 VPS 的公网IP，但是访问阻断情况和国内直接访问一致，并且还额外导致百度无法访问。\n再次测试，例如 Apple 等未被 GFW 封锁的网站都是可以正常访问的。\n由此可见：由于 VXLAN 并不加密，GFW 的审查应该是会剥离 VXLAN 头部直接审查内部报文，所以访问阻断的结果和国内一致。\n# 结论 GFW 对 VXLAN 并不会放松审查，但是猜测：VXLAN 报文中含有被阻断的域名、IP，并不会直接导致 GFW 封锁 VPS 的 IP。 由第1点，或许可以采用 VXLAN 报文作为外层包装，从而达到保护 VPS IP 的目的。毕竟各大机场基本都是通过国内公有云中转，而中转流量很大一部分应该跑在 VXLAN 之上。 VXLAN 对性能的损失非常小，但由于 VXLAN 的配置需要双向公网 IP，没有公网 IP 的情况下，使用起来有两个思路： 作为外层包装协议，并不实际创建 VXLAN 隧道； 使用国内公有云中转，国内外 VPS 直接配置 VXLAN 隧道； ","date":"2023-12-01T22:09:55+08:00","image":"http://localhost:1313/p/2023/12/fuck-gfw-vxlan/cover_hue34695e9e5194dc70340a7c1fbc98d68_55478_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/2023/12/fuck-gfw-vxlan/","title":"Vxlan 是否能让 GFW 放松一点？Vxlan 搭建科学上网实验"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n集成参考了 Google 的 docsy 中的集成方式。\n主题 hugo-theme-stack 中没有集成 Mermaid，仅集成了 Katex，需要画图的时候就要自己引入 Mermaid 。\n由于使用 module 的方式使用主题，故并不想因为为了引入 Mermaid 而修改主题模板。Stack 提供了两个空的模板来支持自定义，所以就通过这两个自定义模板来引入。\nlayouts/partials/head/custom.html layouts/partials/footer/custom.html 另外，为了方便后续维护，也同时使用 docsy 里的方式引入了 Katex。\n# 集成方式 主要的工作是添加钩子模板和引入相关的JavaScript文件。\n# 新增文件 将本项目中的以下文件，直接拷贝到你的项目中。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 钩子模板 layouts/_default/_markup/render-codeblock-chem.html layouts/_default/_markup/render-codeblock-markmap.html layouts/_default/_markup/render-codeblock-math.html layouts/_default/_markup/render-codeblock-mermaid.html # 主题可自定义的模板文件 layouts/partials/head/custom.html layouts/partials/footer/custom.html # JavaScript文件集中引入 layouts/partials/scripts.html # JavaScript文件和CSS文件 assets/js/markmap.js assets/js/mermaid.js static/js/prism.js static/css/prism.css # 新增相关配置 config_default\\params.yaml\n1 2 3 4 5 6 7 8 9 10 11 markmap: enable: true mermaid: enable: true theme: default flowchart: diagramPadding: 20 katex: enable: true mhchem: enable: true PS: 如果不是使用的Configuration Directory，要把配置加到params下。\n# 使用示例 # Mermaid graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; # MarkMap # markmap ## Links - \u0026lt;https://markmap.js.org/\u0026gt; - [GitHub](https://github.com/gera2ld/markmap) ## Related - [coc-markmap](https://github.com/gera2ld/coc-markmap) - [gatsby-remark-markmap](https://github.com/gera2ld/gatsby-remark-markmap) ## Features - links - **inline** ~~text~~ *styles* - multiline text - `inline code` - ```js console.log(\u0026#39;code block\u0026#39;); ``` - Katex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ # Mathjax 行间公式：$$\\sum_{i=0}N\\int_{a}{b}g(t,i)\\text{d}t$$\n行内公式：\\(y=ax+b\\)\nmath 代码块：\n$$\\tag*{(1)} P(E) = {n \\choose k} p^k (1-p)^{n-k}$$ # mhchem $$\\tag*{(2)} \\ce{Zn^2+ \u003c=\u003e[+ 2OH-][+ 2H+] $\\underset{\\text{amphoteric hydroxide}}{\\ce{Zn(OH)2 v}}$ \u003c=\u003e[+ 2OH-][+ 2H+] $\\underset{\\text{tetrahydroxozincate}}{\\ce{[Zn(OH)4]^2-}}$}$$","date":"2023-04-19T21:59:22+08:00","image":"http://localhost:1313/p/2023/04/hugo-diagrams/cover_hu12622322b94eb79e6e7d3536c4e44d98_131370_120x120_fill_q75_box_smart1.jpg","permalink":"http://localhost:1313/p/2023/04/hugo-diagrams/","title":"在 Hugo Stack 中集成 Mermaid 和 MarkMap"},{"content":"🔥🔥🔥：稳定好用的机场/梯子 TAG 全球250+节点、99+流媒体解锁，更多参考机场推荐\n# 前言 当前 V2Ray 应该算是比较好用的翻墙软件，和 ss、ssr 相比还是很稳定的，不容易被检测，尤其是加上 Nginx 和 TLS，再做个简单的网站顶在前面，完全伪造成了一个正常的网页访问行为，非常安全可靠，并且具有很强的抗检测能力。\n必须会简单使用 Linux 命令行，即 Shell 以下示例中的域名均为www.example.cc，域名、UUID 以及 MTProto 的密钥请记得替换成自己的 有耐心、喜欢折腾或者想自己学点东西的就往下看 没耐心的可以去用机场或者一键脚本 这是针对学生和工薪阶层且有科学上网需求的同志，土豪请直接用机场去吧（比如外号 richCloud 的 rixCloud） # 参考文档 V2Ray 官方文档 V2Ray 白话文教程 MTProxy 官方文档\n# 涉及的内容 graph LR subgraph V2Ray v2rayws[V2Ray WebSocket] v2raytg[V2Ray MTProto] end free((WAN)) rep(外部请求) --\u0026gt; in[Nginx] in -- / --\u0026gt; web[腾讯公益404] in -- /wss --\u0026gt; v2rayws v2rayws --\u0026gt; free tgc(Telegram Client) --\u0026gt; v2raytg v2raytg --\u0026gt; free 域名申请； Let\u0026rsquo;s Encrypt 申请 SSL 证书； Nginx 作为前置服务配置 web 主页； 通过配置 Nginx 反向代理访问后面的 v2ray 服务； v2ray 同时提供 mtproto 服务； 使用腾讯公益 404 作为 web 主页； # 大致的步骤 准备服务器； 申请域名； 创建网站根目录； 安装 Nginx； 获得 SSL 证书； 修改 Nginx 配置支持 Https； 安装启动 V2Ray； # 安装部署 # 端口规划 Port Listen IP Use 80 0.0.0.0 Nginx Http 443 0.0.0.0 Nginx Https 10443 127.0.0.1 V2Ray WebSocket 8080 0.0.0.0 V2Ray MTProto # 服务器准备 拿来翻墙用的服务器，肯定是本着便宜好用性价比高的原则来选择。搬瓦工毕竟有 cn2 和 cn2 gia 线路，价格也算是最便宜的，重点可以支付宝支付，还是选择搬瓦工吧。\n逢年过节，搬瓦工都会推出特别款优惠主机，比如双十一、黑五，性价比极高！可以关注下。\n# BandwagonHost 套餐选择 搬瓦工套餐很多，相同配置不同价格排序如下： 普通线路 \u0026lt; CN2线路 \u0026lt; CN2 GIA线路 一般情况下个人使用或者家用的话，最便宜的套餐足以，不常看视频，一个月流量在 100-200GB。\n注册购买什么的就不赘述了，现在上过学都看得懂英文。\n根据自己的需求选择相应的配置即可，避免浪费。\n访问谷歌，简单的网页访问需求 1 2 3 4 5 6 10G VZ - PROMO SSD: 10 GB RAID-10 RAM: 512 MB CPU: 1x Intel Xeon Transfer: 500 GB/mo Link speed: 1 Gigabit 19.99 美刀一年，只能年付。 OpenVZ 架构，唯一的优势就是便宜。高峰期对主机性能和网络都有影响。\n偶尔看看视频，比如油管 1 2 3 4 5 6 SPECIAL 10G KVM PROMO V3 - LOS ANGELES - CN2 SSD: 10 GB RAID-10 RAM: 512 MB CPU: 1x Intel Xeon Transfer: 500 GB/mo Link speed: 1 Gigabit 29.99 美刀一年，只能年付。一般人建议买这个。 KVM 架构，延迟勉强，170ms左右，油管 4K 撑得住。高峰期对网络有一定影响。\n强烈视频需求，打游戏，需要低延迟网络 1 2 3 4 5 6 7 SPECIAL 10G KVM PROMO V3 - LOS ANGELES - CN2 GIA - LIMITED EDITION **Limited stock available** SSD: 10 GB RAID-10 RAM: 512 MB CPU: 1x Intel Xeon Transfer: 300 GB/mo Link speed: 1 Gigabit 39.99 美刀一年，只能年付。此套餐经常缺货，想买的需要关注，有钱可以买上一级套餐（可季付、半年付、年付）。\n同样 KVM 架构，延迟比 cn2 略低，油管 4K 撑得住。高峰期对网络影响较小。\n# 准备软件 1、 MobaXterm: SSH 客户端工具，集成了 SFTP，安装免费版即可 2、 Visual Studio Code: 编辑器，主要拿来编辑 Nginx 的配置文件和 V2ray 的配置文件，支持 JSON 代码高亮，避免配置文件编写错误\n# 配置服务器 这里以搬瓦工为例。\n# 更换操作系统 建议选择 CentOS7 吧，方便好用。如果是 KVM 架构的机器，还能选择支持 bbr 的操作 CentOS。这里以 CN2 GIA 的服务器为例。\n以下命令均以 CentOS7 下的命令为例\n登录搬瓦工Client Area，点Services -\u0026gt; My Services查看自己的所有服务 点击对应Product/Service后面的KiwiVM Control Panel按钮进入控制台 首先将虚拟机关机，关机后才能重装系统 选择Install new OS，然后选择\u0026quot;centos-7-x86_64-bbr\u0026quot;，勾选\u0026quot;I agree ...\u0026quot;，点Reload重新安装 记下 root 密码和端口号备用 # 更改服务器密码 使用 MobaXterm（或者其他 SSH 工具），使用刚刚的密码和端口号登录服务器，注意下端口号，搬瓦工的 SSH 不是默认 22 端口。 登录后执行passwd，然后输入两遍新密码即可\n1 2 3 4 5 $ passwd Changing password for user root. New password: Retype new password: passwd: all authentication tokens updated successfully. # 更新系统 搬瓦工自带的 epel 总觉得缺包，所以卸载重新安装下。 同时需要安装下 vim、git、zip 和 unzip。\n1 2 3 4 yum remove -y epel-release yum install -y epel-release yum update -y yum install -y vim git zip unzip # 申请域名 由于要使用 TLS，所以需要一个域名。建议注册.cc结尾的域名，便宜并且不需要实名认证。 传送门：https://wanwang.aliyun.com/\n假设我们申请的域名的是：example.cc，编写配置文件时记得替换成自己的。\n# 配置域名解析 域名解析这里配置两条，把example.cc和www.example.cc都指向服务器的地址。 配置好之后，可以在本地 ping 一下，看看通没通。\n1 ping example.cc # 准备 web 根目录 新建目录\n1 mkdir -p /www/root 增加index.html\n1 vim /www/root/index.html 按下i键到插入模式后，将以下所有内容贴进去。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;404\u0026lt;/title\u0026gt; \u0026lt;meta http-equiv=\u0026#34;Content-Type\u0026#34; content=\u0026#34;text/html\u0026#34; charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\u0026#34; charset=\u0026#34;utf-8\u0026#34; homePageUrl=\u0026#34;https://www.example.cc/\u0026#34; homePageName=\u0026#34;回到我的主页\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;/html\u0026gt; # 安装配置 Nginx Nginx 安装后，会用到两份配置：\n第一份是给第一次申请 Let\u0026rsquo;s Encrypt 的 SSL 证书用的（由于此时还没有证书，配置成 Https） 第二份是增加了 V2Ray 反代和 Http 重定向 Https 的配置，这个就是一直要用的配置 # 安装 Nginx 很简单，一行命令搞定。\n1 yum install -y nginx # 编辑nginx.conf 文件/etc/nginx/nginx.conf。 害怕出错的或者新手请将文件 SFTP 下载到本地，使用 VSCode 修改后再 SFTP 传回服务器。 熟悉 vim 的就直接在命令行修改吧。\n配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 user nginx; worker_processes auto; error_log /dev/null; pid /run/nginx.pid; include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log off; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name example.cc www.example.cc; root /www/root; index index.html index.htm; location / { } } } # 启动 Nginx 服务 1 2 systemctl enable nginx systemctl start nginx 然后查看下运行状态是否已经正常启动，看到running即是正常。\n1 2 3 4 $ systemctl status nginx ● nginx.service - The nginx HTTP and reverse proxy server Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled) Active: active (running) since Wed 2018-11-14 11:22:53 CST; 4 days ago 然后打开浏览器访问www.example.cc和example.cc看是否能打开腾讯公益 404 页面。能打开说明 Nginx 已经正确配置，然后就可以开始申请 SSL 证书了。\n# 安装 V2Ray 具体参考V2Ray 官方文档：\n1 bash \u0026lt;(curl -L -s https://install.direct/go.sh) 安装完成后自动启动，这里先把它给停了\n1 systemctl stop v2ray # 申请 Let\u0026rsquo;s Encrypt 的 SSL 证书 Let\u0026rsquo;s Encrypt 有很多 ACME 客户端的实现。这里选用acme.sh。\n# 安装 acme.sh 安装很简单，一个命令：\n1 curl https://get.acme.sh | sh 安装完成后执行下\n1 source /root/.bashrc # 申请证书 很简单，一也是命令：\n1 acme.sh --issue -d example.cc -d www.example.cc --webroot /www/root/ -k ec-256 使用 ec-256 证书，让通信更安全吧。\n# 将证书安装到目录 这里将证书放到/etx/v2ray目录下。\n1 acme.sh --installcert -d example.cc -d www.example.cc --key-file /etc/v2ray/v2ray.key --fullchain-file /etc/v2ray/v2ray.crt --ecc --reloadcmd \u0026#34;service nginx force-reload \u0026amp;\u0026amp; systemctl restart v2ray\u0026#34; 这行命令除了将证书放到指定目录下外，还会自动创建 crontab 定时任务，后面引号里的命令是定时任务更新证书后执行的命令。\n# 配置 Nginx 支持 Https 访问 不废话了，直接修改/etc/nginx/nginx.conf，完整配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 user nginx; worker_processes auto; error_log /dev/null; pid /run/nginx.pid; include /usr/share/nginx/modules/*.conf; events { worker_connections 1024; } http { log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log off; server_tokens off; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; # Http Server，强制跳转Https server { listen 80 default_server; listen [::]:80 default_server; server_name example.cc www.example.cc; rewrite ^(.*)$ https://www.example.cc$1 permanent; } # Https Server server { listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; server_name www.example.cc; root /www/root; index index.html index.htm; ssl_certificate \u0026#34;/etc/v2ray/v2ray.crt\u0026#34;; ssl_certificate_key \u0026#34;/etc/v2ray/v2ray.key\u0026#34;; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; include /etc/nginx/default.d/*.conf; location / { } # 反向代理V2Ray location /wss { proxy_redirect off; proxy_pass http://127.0.0.1:10443; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } } 配置完之后重新启动 Nginx\n1 systemctl restart nginx 访问www.example.cc和example.cc，如果自动跳转https://www.example.cc并且正确显示公益 404 则已经配置正确。\n# 配置 V2Ray 并启动 前置的所有服务都已经配置完毕，只差最后的 V2Ray 了。\n# 为 V2Ray 生成一个 UUID 使用 V2Ray 自带的v2ctl工具生成一个新的 uuid。\n1 2 $ /usr/bin/v2ray/v2ctl uuid 27e0efcc-8e13-fef1-9e82-febebc469b2b 记录下此 uuid\n# 为 mtproto 生成一个密钥 使用 linux 系统创建伪随机数作为密钥。\n1 2 $ head -c 16 /dev/urandom | xxd -ps 80e2e037610bac1444ac02979364f666 记录下此随机数\n# 修改/etc/v2ray/config.json 同样的，没把握用 vim 修改的，就拷贝下来在 VSCode 里修改，改完再传回服务器。\n将刚生成的 uuid 和随机数填入对应的位置。\n完整配置文件如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;/var/log/v2ray/access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;/var/log/v2ray/error.log\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 10443, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;27e0efcc-8e13-fef1-9e82-febebc469b2b\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/wss\u0026#34; } } }, { \u0026#34;tag\u0026#34;: \u0026#34;tg-in\u0026#34;, \u0026#34;port\u0026#34;: 8080, \u0026#34;protocol\u0026#34;: \u0026#34;mtproto\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;users\u0026#34;: [ { \u0026#34;secret\u0026#34;: \u0026#34;80e2e037610bac1444ac02979364f666\u0026#34; } ] } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;response\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tag\u0026#34;: \u0026#34;blocked\u0026#34; }, { \u0026#34;tag\u0026#34;: \u0026#34;tg-out\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;mtproto\u0026#34;, \u0026#34;settings\u0026#34;: {} } ], \u0026#34;routing\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;IPOnDemand\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [\u0026#34;geoip:private\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;blocked\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;inboundTag\u0026#34;: [\u0026#34;tg-in\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;tg-out\u0026#34; } ] } } } #####　启动 V2Ray\n开启开机启动并启动。\n1 2 systemctl enable v2ray systemctl start v2ray 启动之后查看下运行状态，看是否正常运行\n1 2 3 4 5 6 7 $systemctl status v2ray ● v2ray.service - V2Ray Service Loaded: loaded (/etc/systemd/system/v2ray.service; enabled; vendor preset: disabled) Active: active (running) since Sun 2018-11-18 17:00:07 CST; 3h 26min ago Main PID: 8908 (v2ray) CGroup: /system.slice/v2ray.service └─8908 /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json # 客户端配置 客户端配置不尽相同，对应客户端详细配置可以自己百度。\n这里用文字描述下大致的配置步骤：\n协议类型选择Vmess，需要和服务端一致 地址填www.example.cc，需要和服务端一致 端口填443，需要和服务端一致 UUID 填27e0efcc-8e13-fef1-9e82-febebc469b2b，需要和服务端一致 传输协议选择ws，路径填写/wss，需要和服务端一致 开启 TLS AlterId 填写64，需要和服务端一致 # IOS 客户端 IOS 下的 VPN 类客户端在国区基本下架下完了，V2Ray 推荐使用 Kitsunebi 的 TestFlight 版本。\n在手机上安装 TestFlight App：https://itunes.apple.com/us/app/testflight/id899247664?mt=8 在手机上打开这个链接自动加入 TestFlight：https://testflight.apple.com/join/2w6EF67u \u0026ndash;\u0026gt;原文地址\n# 其它 其它客户端请参考： Windows Android Mac OS X\n# 最后提供两份客户端配置文件 无需求的以下就可以不看了。\n# PC 用的支持国内外分流 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 1087, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;allowTransparent\u0026#34;: true } }, { \u0026#34;port\u0026#34;: 1086, \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;domainOverride\u0026#34;: [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;], \u0026#34;settings\u0026#34;: { \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34;, \u0026#34;udp\u0026#34;: true } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;www.example.cc\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;27e0efcc-8e13-fef1-9e82-febebc469b2b\u0026#34;, \u0026#34;alterId\u0026#34;: 64, \u0026#34;security\u0026#34;: \u0026#34;auto\u0026#34; } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/wss\u0026#34; }, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34; }, \u0026#34;mux\u0026#34;: { \u0026#34;enabled\u0026#34;: false, \u0026#34;concurrency\u0026#34;: 8 }, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {}, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;protocol\u0026#34;: \u0026#34;blackhole\u0026#34;, \u0026#34;settings\u0026#34;: {}, \u0026#34;tag\u0026#34;: \u0026#34;block\u0026#34; } ], \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;D:/v2ray_access.log\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;D:/v2ray_error.log\u0026#34; }, \u0026#34;dns\u0026#34;: { \u0026#34;hosts\u0026#34;: { \u0026#34;example.com\u0026#34;: \u0026#34;127.0.0.1\u0026#34; }, \u0026#34;servers\u0026#34;: [\u0026#34;223.5.5.5\u0026#34;, \u0026#34;8.8.8.8\u0026#34;, \u0026#34;localhost\u0026#34;] }, \u0026#34;routing\u0026#34;: { \u0026#34;strategy\u0026#34;: \u0026#34;rules\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;IPIfNonMatch\u0026#34;, \u0026#34;rules\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;dropbox\u0026#34;, \u0026#34;github\u0026#34;, \u0026#34;google\u0026#34;, \u0026#34;instagram\u0026#34;, \u0026#34;netflix\u0026#34;, \u0026#34;pinterest\u0026#34;, \u0026#34;pixiv\u0026#34;, \u0026#34;tumblr\u0026#34;, \u0026#34;twitter\u0026#34;, \u0026#34;domain:facebook.com\u0026#34;, \u0026#34;domain:fbcdn.net\u0026#34;, \u0026#34;domain:fivecdm.com\u0026#34;, \u0026#34;domain:ggpht.com\u0026#34;, \u0026#34;domain:gstatic.com\u0026#34;, \u0026#34;domain:line-scdn.net\u0026#34;, \u0026#34;domain:line.me\u0026#34;, \u0026#34;domain:medium.com\u0026#34;, \u0026#34;domain:naver.jp\u0026#34;, \u0026#34;domain:pximg.net\u0026#34;, \u0026#34;domain:t.co\u0026#34;, \u0026#34;domain:twimg.com\u0026#34;, \u0026#34;domain:youtube.com\u0026#34;, \u0026#34;domain:ytimg.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;proxy\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [ \u0026#34;125.209.222.0/24\u0026#34;, \u0026#34;149.154.167.0/24\u0026#34;, \u0026#34;149.154.175.0/24\u0026#34;, \u0026#34;91.108.56.0/24\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;proxy\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [ \u0026#34;cctv\u0026#34;, \u0026#34;geosite:cn\u0026#34;, \u0026#34;umeng\u0026#34;, \u0026#34;domain:apple.com\u0026#34;, \u0026#34;domain:crashlytics.com\u0026#34;, \u0026#34;domain:icloud.com\u0026#34;, \u0026#34;domain:ixigua.com\u0026#34;, \u0026#34;domain:pstatp.com\u0026#34;, \u0026#34;domain:snssdk.com\u0026#34;, \u0026#34;domain:toutiao.com\u0026#34; ], \u0026#34;outboundTag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;ip\u0026#34;: [\u0026#34;geoip:cn\u0026#34;, \u0026#34;geoip:private\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;direct\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;field\u0026#34;, \u0026#34;domain\u0026#34;: [\u0026#34;domain:doubleclick.net\u0026#34;], \u0026#34;outboundTag\u0026#34;: \u0026#34;block\u0026#34; } ] } } } # 路由器用的，透明代理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 { \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 7070, \u0026#34;protocol\u0026#34;: \u0026#34;dokodemo-door\u0026#34;, \u0026#34;domainOverride\u0026#34;: [\u0026#34;tls\u0026#34;, \u0026#34;http\u0026#34;], \u0026#34;address\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;tcp,udp\u0026#34;, \u0026#34;timeout\u0026#34;: 30, \u0026#34;followRedirect\u0026#34;: true } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;www.example.cc\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;27e0efcc-8e13-fef1-9e82-febebc469b2b\u0026#34;, \u0026#34;alterId\u0026#34;: 64, \u0026#34;security\u0026#34;: \u0026#34;auto\u0026#34; } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;ws\u0026#34;, \u0026#34;wsSettings\u0026#34;: { \u0026#34;path\u0026#34;: \u0026#34;/wss\u0026#34; }, \u0026#34;security\u0026#34;: \u0026#34;tls\u0026#34; }, \u0026#34;mux\u0026#34;: { \u0026#34;enabled\u0026#34;: false } } ], \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;error\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;dns\u0026#34;: { \u0026#34;servers\u0026#34;: [\u0026#34;localhost\u0026#34;] } } ","date":"2018-11-18T13:32:58+08:00","image":"http://localhost:1313/p/2018/11/v2ray-tutorial/cover_hud03d4371e9ff889abb8d731e50f5e29e_5871_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/2018/11/v2ray-tutorial/","title":"V2Ray4.x + Nginx + TLS + ws + MTProto 详细配置教程"}]